diff --git a/src/KOKKOS/atom_vec_angle_kokkos.cpp b/src/KOKKOS/atom_vec_angle_kokkos.cpp
index 0cf49a9..ba36aa3 100644
--- a/src/KOKKOS/atom_vec_angle_kokkos.cpp
+++ b/src/KOKKOS/atom_vec_angle_kokkos.cpp
@@ -227,7 +227,7 @@ struct AtomVecAngleKokkos_PackComm {
   typedef ArrayTypes<Space> AT;
 
   typename AT::t_float_1d_3_randomread _x;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_2d_const _list;
   const int _iswap;
   KK_FLOAT _xprd,_yprd,_zprd,_xy,_xz,_yz;
@@ -235,7 +235,7 @@ struct AtomVecAngleKokkos_PackComm {
 
   AtomVecAngleKokkos_PackComm(
       const typename DAT::tdual_float_1d_3 &x,
-      const typename DAT::tdual_float_2d &buf,
+      const typename DAT::tdual_double_2d_lr &buf,
       const typename DAT::tdual_int_2d &list,
       const int & iswap,
       const KK_FLOAT &xprd, const KK_FLOAT &yprd, const KK_FLOAT &zprd,
@@ -277,7 +277,7 @@ struct AtomVecAngleKokkos_PackComm {
 int AtomVecAngleKokkos::pack_comm_kokkos(const int &n,
                                          const DAT::tdual_int_2d &list,
                                          const int & iswap,
-                                         const DAT::tdual_float_2d &buf,
+                                         const DAT::tdual_double_2d_lr &buf,
                                          const int &pbc_flag,
                                          const int* const pbc)
 {
@@ -478,12 +478,12 @@ struct AtomVecAngleKokkos_UnpackComm {
   typedef ArrayTypes<Space> AT;
 
   typename AT::t_float_1d_3 _x;
-  typename AT::t_float_2d_const _buf;
+  typename AT::t_double_2d_lr_const _buf;
   int _first;
 
   AtomVecAngleKokkos_UnpackComm(
       const typename DAT::tdual_float_1d_3 &x,
-      const typename DAT::tdual_float_2d &buf,
+      const typename DAT::tdual_double_2d_lr &buf,
       const int& first):_x(DualViewHelper<Space>::view(x)),_buf(DualViewHelper<Space>::view(buf)),
                         _first(first) {};
 
@@ -498,7 +498,7 @@ struct AtomVecAngleKokkos_UnpackComm {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecAngleKokkos::unpack_comm_kokkos(const int &n, const int &first,
-    const DAT::tdual_float_2d &buf ) {
+    const DAT::tdual_double_2d_lr &buf ) {
   if(commKK->forward_comm_on_host) {
     atomKK->sync(Host,X_MASK);
     atomKK->modified(Host,X_MASK);
@@ -685,7 +685,7 @@ struct AtomVecAngleKokkos_PackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d _buf;
+  typename AT::t_double_2d_lr _buf;
   const typename AT::t_int_2d_const _list;
   const int _iswap;
   const typename AT::t_float_1d_3_randomread _x;
@@ -696,7 +696,7 @@ struct AtomVecAngleKokkos_PackBorder {
   KK_FLOAT _dx,_dy,_dz;
 
   AtomVecAngleKokkos_PackBorder(
-      const typename AT::t_float_2d &buf,
+      const typename AT::t_double_2d_lr &buf,
       const typename AT::t_int_2d_const &list,
       const int & iswap,
       const typename AT::t_float_1d_3 &x,
@@ -735,7 +735,7 @@ struct AtomVecAngleKokkos_PackBorder {
 /* ---------------------------------------------------------------------- */
 
 int AtomVecAngleKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                                          DAT::tdual_float_2d buf,int iswap,
+                                          DAT::tdual_double_2d_lr buf,int iswap,
                                           int pbc_flag, int *pbc, ExecutionSpace space)
 {
   KK_FLOAT dx,dy,dz;
@@ -930,7 +930,7 @@ struct AtomVecAngleKokkos_UnpackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  const typename AT::t_float_2d_const _buf;
+  const typename AT::t_double_2d_lr_const _buf;
   typename AT::t_float_1d_3 _x;
   typename AT::t_tagint_1d _tag;
   typename AT::t_int_1d _type;
@@ -940,7 +940,7 @@ struct AtomVecAngleKokkos_UnpackBorder {
 
 
   AtomVecAngleKokkos_UnpackBorder(
-      const typename AT::t_float_2d_const &buf,
+      const typename AT::t_double_2d_lr_const &buf,
       typename AT::t_float_1d_3 &x,
       typename AT::t_tagint_1d &tag,
       typename AT::t_int_1d &type,
@@ -967,7 +967,7 @@ struct AtomVecAngleKokkos_UnpackBorder {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecAngleKokkos::unpack_border_kokkos(const int &n, const int &first,
-                                             const DAT::tdual_float_2d &buf,
+                                             const DAT::tdual_double_2d_lr &buf,
                                              ExecutionSpace space) {
   atomKK->modified(space,X_MASK|TAG_MASK|TYPE_MASK|MASK_MASK|MOLECULE_MASK);
   while (first+n >= nmax) grow(0);
@@ -1090,7 +1090,7 @@ struct AtomVecAngleKokkos_PackExchangeFunctor {
   typename AT::t_int_2d _angle_typew;
   typename AT::t_tagint_2d _angle_atom1w,_angle_atom2w,_angle_atom3w;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d_const _sendlist;
   typename AT::t_int_1d_const _copylist;
   int _nlocal,_dim;
@@ -1099,7 +1099,7 @@ struct AtomVecAngleKokkos_PackExchangeFunctor {
 
   AtomVecAngleKokkos_PackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d sendlist,
       DAT::tdual_int_1d copylist,int nlocal, int dim,
                 KK_FLOAT lo, KK_FLOAT hi):
@@ -1224,7 +1224,7 @@ struct AtomVecAngleKokkos_PackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecAngleKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &k_buf,
+int AtomVecAngleKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &k_buf,
                                             DAT::tdual_int_1d k_sendlist,
                                             DAT::tdual_int_1d k_copylist,
                                             ExecutionSpace space,int dim,KK_FLOAT lo,
@@ -1317,7 +1317,7 @@ struct AtomVecAngleKokkos_UnpackExchangeFunctor {
   typename AT::t_int_2d _angle_type;
   typename AT::t_tagint_2d _angle_atom1,_angle_atom2,_angle_atom3;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d _nlocal;
   int _dim;
   KK_FLOAT _lo,_hi;
@@ -1325,7 +1325,7 @@ struct AtomVecAngleKokkos_UnpackExchangeFunctor {
 
   AtomVecAngleKokkos_UnpackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d nlocal,
       int dim, KK_FLOAT lo, KK_FLOAT hi):
     _x(DualViewHelper<Space>::view(atom->k_x)),
@@ -1395,7 +1395,7 @@ struct AtomVecAngleKokkos_UnpackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecAngleKokkos::unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf,int nrecv,
+int AtomVecAngleKokkos::unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf,int nrecv,
                                               int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,
                                               ExecutionSpace space) {
   const size_t elements = 17+atom->maxspecial+2*atom->bond_per_atom+4*atom->angle_per_atom;
diff --git a/src/KOKKOS/atom_vec_angle_kokkos.h b/src/KOKKOS/atom_vec_angle_kokkos.h
index d778e42..b6ce79c 100644
--- a/src/KOKKOS/atom_vec_angle_kokkos.h
+++ b/src/KOKKOS/atom_vec_angle_kokkos.h
@@ -61,25 +61,25 @@ class AtomVecAngleKokkos : public AtomVecKokkos {
   void grow_pointers();
   int pack_comm_kokkos(const int &n, const DAT::tdual_int_2d &k_sendlist,
                        const int & iswap,
-                       const DAT::tdual_float_2d &buf,
+                       const DAT::tdual_double_2d_lr &buf,
                        const int &pbc_flag, const int pbc[]);
   void unpack_comm_kokkos(const int &n, const int &nfirst,
-                          const DAT::tdual_float_2d &buf);
+                          const DAT::tdual_double_2d_lr &buf);
   int pack_comm_self(const int &n, const DAT::tdual_int_2d &list,
                      const int & iswap, const int nfirst,
                      const int &pbc_flag, const int pbc[]);
   int pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                         DAT::tdual_float_2d buf,int iswap,
+                         DAT::tdual_double_2d_lr buf,int iswap,
                          int pbc_flag, int *pbc, ExecutionSpace space);
   void unpack_border_kokkos(const int &n, const int &nfirst,
-                            const DAT::tdual_float_2d &buf,
+                            const DAT::tdual_double_2d_lr &buf,
                             ExecutionSpace space);
-  int pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &buf,
+  int pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &buf,
                            DAT::tdual_int_1d k_sendlist,
                            DAT::tdual_int_1d k_copylist,
                            ExecutionSpace space, int dim,
                            KK_FLOAT lo, KK_FLOAT hi);
-  int unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf, int nrecv,
+  int unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf, int nrecv,
                              int nlocal, int dim, KK_FLOAT lo, KK_FLOAT hi,
                              ExecutionSpace space);
 
diff --git a/src/KOKKOS/atom_vec_atomic_kokkos.cpp b/src/KOKKOS/atom_vec_atomic_kokkos.cpp
index 2cc1806..ec25ab4 100644
--- a/src/KOKKOS/atom_vec_atomic_kokkos.cpp
+++ b/src/KOKKOS/atom_vec_atomic_kokkos.cpp
@@ -143,7 +143,7 @@ struct AtomVecAtomicKokkos_PackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d _buf;
+  typename AT::t_double_2d_lr _buf;
   const typename AT::t_int_2d_const _list;
   const int _iswap;
   const typename AT::t_float_1d_3_randomread _x;
@@ -153,7 +153,7 @@ struct AtomVecAtomicKokkos_PackBorder {
   KK_FLOAT _dx,_dy,_dz;
 
   AtomVecAtomicKokkos_PackBorder(
-      const typename AT::t_float_2d &buf,
+      const typename AT::t_double_2d_lr &buf,
       const typename AT::t_int_2d_const &list,
       const int & iswap,
       const typename AT::t_float_1d_3 &x,
@@ -188,7 +188,7 @@ struct AtomVecAtomicKokkos_PackBorder {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecAtomicKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist, DAT::tdual_float_2d buf,int iswap,
+int AtomVecAtomicKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist, DAT::tdual_double_2d_lr buf,int iswap,
                                int pbc_flag, int *pbc, ExecutionSpace space)
 {
   KK_FLOAT dx,dy,dz;
@@ -364,7 +364,7 @@ struct AtomVecAtomicKokkos_UnpackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  const typename AT::t_float_2d_const _buf;
+  const typename AT::t_double_2d_lr_const _buf;
   typename AT::t_float_1d_3 _x;
   typename AT::t_tagint_1d _tag;
   typename AT::t_int_1d _type;
@@ -373,7 +373,7 @@ struct AtomVecAtomicKokkos_UnpackBorder {
 
 
   AtomVecAtomicKokkos_UnpackBorder(
-      const typename AT::t_float_2d_const &buf,
+      const typename AT::t_double_2d_lr_const &buf,
       typename AT::t_float_1d_3 &x,
       typename AT::t_tagint_1d &tag,
       typename AT::t_int_1d &type,
@@ -397,7 +397,7 @@ struct AtomVecAtomicKokkos_UnpackBorder {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecAtomicKokkos::unpack_border_kokkos(const int &n, const int &first,
-                     const DAT::tdual_float_2d &buf,ExecutionSpace space) {
+                     const DAT::tdual_double_2d_lr &buf,ExecutionSpace space) {
   atomKK->modified(space,X_MASK|TAG_MASK|TYPE_MASK|MASK_MASK);
   while (first+n >= nmax) grow(0);
   atomKK->modified(space,X_MASK|TAG_MASK|TYPE_MASK|MASK_MASK);
@@ -484,7 +484,7 @@ struct AtomVecAtomicKokkos_PackExchangeFunctor {
   typename AT::t_int_1d _maskw;
   typename AT::t_imageint_1d _imagew;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d_const _sendlist;
   typename AT::t_int_1d_const _copylist;
   int _nlocal,_dim;
@@ -492,7 +492,7 @@ struct AtomVecAtomicKokkos_PackExchangeFunctor {
 
   AtomVecAtomicKokkos_PackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d sendlist,
       DAT::tdual_int_1d copylist,int nlocal, int dim,
                 KK_FLOAT lo, KK_FLOAT hi):
@@ -551,7 +551,7 @@ struct AtomVecAtomicKokkos_PackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecAtomicKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &k_buf, DAT::tdual_int_1d k_sendlist,DAT::tdual_int_1d k_copylist,ExecutionSpace space,int dim,KK_FLOAT lo,KK_FLOAT hi )
+int AtomVecAtomicKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &k_buf, DAT::tdual_int_1d k_sendlist,DAT::tdual_int_1d k_copylist,ExecutionSpace space,int dim,KK_FLOAT lo,KK_FLOAT hi )
 {
   if(nsend > (int) (k_buf.h_view.extent(0)*k_buf.h_view.extent(1))/11) {
     int newsize = nsend*11/k_buf.h_view.extent(1)+1;
@@ -607,14 +607,14 @@ struct AtomVecAtomicKokkos_UnpackExchangeFunctor {
   typename AT::t_int_1d _mask;
   typename AT::t_imageint_1d _image;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d _nlocal;
   int _dim;
   KK_FLOAT _lo,_hi;
 
   AtomVecAtomicKokkos_UnpackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d nlocal,
       int dim, KK_FLOAT lo, KK_FLOAT hi):
                 _x(DualViewHelper<Space>::view(atom->k_x)),
@@ -652,7 +652,7 @@ struct AtomVecAtomicKokkos_UnpackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecAtomicKokkos::unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf,int nrecv,int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,ExecutionSpace space) {
+int AtomVecAtomicKokkos::unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf,int nrecv,int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,ExecutionSpace space) {
   if(space == Host) {
     k_count.h_view(0) = nlocal;
     AtomVecAtomicKokkos_UnpackExchangeFunctor<Host> f(atomKK,k_buf,k_count,dim,lo,hi);
diff --git a/src/KOKKOS/atom_vec_atomic_kokkos.h b/src/KOKKOS/atom_vec_atomic_kokkos.h
index 8d54618..5d1e304 100644
--- a/src/KOKKOS/atom_vec_atomic_kokkos.h
+++ b/src/KOKKOS/atom_vec_atomic_kokkos.h
@@ -50,17 +50,17 @@ class AtomVecAtomicKokkos : public AtomVecKokkos {
 
   void grow_pointers();
   int pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                         DAT::tdual_float_2d buf,int iswap,
+                         DAT::tdual_double_2d_lr buf,int iswap,
                          int pbc_flag, int *pbc, ExecutionSpace space);
   void unpack_border_kokkos(const int &n, const int &nfirst,
-                            const DAT::tdual_float_2d &buf,
+                            const DAT::tdual_double_2d_lr &buf,
                             ExecutionSpace space);
-  int pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &buf,
+  int pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &buf,
                            DAT::tdual_int_1d k_sendlist,
                            DAT::tdual_int_1d k_copylist,
                            ExecutionSpace space, int dim,
                            KK_FLOAT lo, KK_FLOAT hi);
-  int unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf, int nrecv,
+  int unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf, int nrecv,
                              int nlocal, int dim, KK_FLOAT lo, KK_FLOAT hi,
                              ExecutionSpace space);
 
diff --git a/src/KOKKOS/atom_vec_bond_kokkos.cpp b/src/KOKKOS/atom_vec_bond_kokkos.cpp
index e1a5469..811275d 100644
--- a/src/KOKKOS/atom_vec_bond_kokkos.cpp
+++ b/src/KOKKOS/atom_vec_bond_kokkos.cpp
@@ -187,7 +187,7 @@ struct AtomVecBondKokkos_PackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d _buf;
+  typename AT::t_double_2d_lr _buf;
   const typename AT::t_int_2d_const _list;
   const int _iswap;
   const typename AT::t_float_1d_3_randomread _x;
@@ -198,7 +198,7 @@ struct AtomVecBondKokkos_PackBorder {
   KK_FLOAT _dx,_dy,_dz;
 
   AtomVecBondKokkos_PackBorder(
-      const typename AT::t_float_2d &buf,
+      const typename AT::t_double_2d_lr &buf,
       const typename AT::t_int_2d_const &list,
       const int & iswap,
       const typename AT::t_float_1d_3 &x,
@@ -237,7 +237,7 @@ struct AtomVecBondKokkos_PackBorder {
 /* ---------------------------------------------------------------------- */
 
 int AtomVecBondKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                                          DAT::tdual_float_2d buf,int iswap,
+                                          DAT::tdual_double_2d_lr buf,int iswap,
                                           int pbc_flag, int *pbc, ExecutionSpace space)
 {
   KK_FLOAT dx,dy,dz;
@@ -432,7 +432,7 @@ struct AtomVecBondKokkos_UnpackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  const typename AT::t_float_2d_const _buf;
+  const typename AT::t_double_2d_lr_const _buf;
   typename AT::t_float_1d_3 _x;
   typename AT::t_tagint_1d _tag;
   typename AT::t_int_1d _type;
@@ -442,7 +442,7 @@ struct AtomVecBondKokkos_UnpackBorder {
 
 
   AtomVecBondKokkos_UnpackBorder(
-      const typename AT::t_float_2d_const &buf,
+      const typename AT::t_double_2d_lr_const &buf,
       typename AT::t_float_1d_3 &x,
       typename AT::t_tagint_1d &tag,
       typename AT::t_int_1d &type,
@@ -469,7 +469,7 @@ struct AtomVecBondKokkos_UnpackBorder {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecBondKokkos::unpack_border_kokkos(const int &n, const int &first,
-                                             const DAT::tdual_float_2d &buf,
+                                             const DAT::tdual_double_2d_lr &buf,
                                              ExecutionSpace space) {
   atomKK->modified(space,X_MASK|TAG_MASK|TYPE_MASK|MASK_MASK|MOLECULE_MASK);
   while (first+n >= nmax) grow(0);
@@ -586,7 +586,7 @@ struct AtomVecBondKokkos_PackExchangeFunctor {
   typename AT::t_int_2d _bond_typew;
   typename AT::t_tagint_2d _bond_atomw;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d_const _sendlist;
   typename AT::t_int_1d_const _copylist;
   int _nlocal,_dim;
@@ -595,7 +595,7 @@ struct AtomVecBondKokkos_PackExchangeFunctor {
 
   AtomVecBondKokkos_PackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d sendlist,
       DAT::tdual_int_1d copylist,int nlocal, int dim,
                 KK_FLOAT lo, KK_FLOAT hi):
@@ -694,7 +694,7 @@ struct AtomVecBondKokkos_PackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecBondKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &k_buf,
+int AtomVecBondKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &k_buf,
                                             DAT::tdual_int_1d k_sendlist,
                                             DAT::tdual_int_1d k_copylist,
                                             ExecutionSpace space,int dim,KK_FLOAT lo,
@@ -777,7 +777,7 @@ struct AtomVecBondKokkos_UnpackExchangeFunctor {
   typename AT::t_int_2d _bond_type;
   typename AT::t_tagint_2d _bond_atom;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d _nlocal;
   int _dim;
   KK_FLOAT _lo,_hi;
@@ -785,7 +785,7 @@ struct AtomVecBondKokkos_UnpackExchangeFunctor {
 
   AtomVecBondKokkos_UnpackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d nlocal,
       int dim, KK_FLOAT lo, KK_FLOAT hi):
     _x(DualViewHelper<Space>::view(atom->k_x)),
@@ -843,7 +843,7 @@ struct AtomVecBondKokkos_UnpackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecBondKokkos::unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf,int nrecv,
+int AtomVecBondKokkos::unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf,int nrecv,
                                               int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,
                                               ExecutionSpace space) {
   const size_t elements = 16+atomKK->maxspecial+atomKK->bond_per_atom+atomKK->bond_per_atom;
diff --git a/src/KOKKOS/atom_vec_bond_kokkos.h b/src/KOKKOS/atom_vec_bond_kokkos.h
index 9a51dff..ff712a8 100644
--- a/src/KOKKOS/atom_vec_bond_kokkos.h
+++ b/src/KOKKOS/atom_vec_bond_kokkos.h
@@ -54,17 +54,17 @@ class AtomVecBondKokkos : public AtomVecKokkos {
 
   void grow_pointers();
   int pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                         DAT::tdual_float_2d buf,int iswap,
+                         DAT::tdual_double_2d_lr buf,int iswap,
                          int pbc_flag, int *pbc, ExecutionSpace space);
   void unpack_border_kokkos(const int &n, const int &nfirst,
-                            const DAT::tdual_float_2d &buf,
+                            const DAT::tdual_double_2d_lr &buf,
                             ExecutionSpace space);
-  int pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &buf,
+  int pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &buf,
                            DAT::tdual_int_1d k_sendlist,
                            DAT::tdual_int_1d k_copylist,
                            ExecutionSpace space, int dim,
                            KK_FLOAT lo, KK_FLOAT hi);
-  int unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf, int nrecv,
+  int unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf, int nrecv,
                              int nlocal, int dim, KK_FLOAT lo, KK_FLOAT hi,
                              ExecutionSpace space);
 
diff --git a/src/KOKKOS/atom_vec_charge_kokkos.cpp b/src/KOKKOS/atom_vec_charge_kokkos.cpp
index 075e305..aa26eca 100644
--- a/src/KOKKOS/atom_vec_charge_kokkos.cpp
+++ b/src/KOKKOS/atom_vec_charge_kokkos.cpp
@@ -156,7 +156,7 @@ struct AtomVecChargeKokkos_PackComm {
   typedef ArrayTypes<Space> AT;
 
   typename AT::t_float_1d_3_randomread _x;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_2d_const _list;
   const int _iswap;
   KK_FLOAT _xprd,_yprd,_zprd,_xy,_xz,_yz;
@@ -164,7 +164,7 @@ struct AtomVecChargeKokkos_PackComm {
 
   AtomVecChargeKokkos_PackComm(
       const typename DAT::tdual_float_1d_3 &x,
-      const typename DAT::tdual_float_2d &buf,
+      const typename DAT::tdual_double_2d_lr &buf,
       const typename DAT::tdual_int_2d &list,
       const int & iswap,
       const KK_FLOAT &xprd, const KK_FLOAT &yprd, const KK_FLOAT &zprd,
@@ -208,7 +208,7 @@ struct AtomVecChargeKokkos_PackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d _buf;
+  typename AT::t_double_2d_lr _buf;
   const typename AT::t_int_2d_const _list;
   const int _iswap;
   const typename AT::t_float_1d_3_randomread _x;
@@ -219,7 +219,7 @@ struct AtomVecChargeKokkos_PackBorder {
   KK_FLOAT _dx,_dy,_dz;
 
   AtomVecChargeKokkos_PackBorder(
-      const typename AT::t_float_2d &buf,
+      const typename AT::t_double_2d_lr &buf,
       const typename AT::t_int_2d_const &list,
       const int & iswap,
       const typename AT::t_float_1d_3 &x,
@@ -257,7 +257,7 @@ struct AtomVecChargeKokkos_PackBorder {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecChargeKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist, DAT::tdual_float_2d buf,int iswap,
+int AtomVecChargeKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist, DAT::tdual_double_2d_lr buf,int iswap,
                                int pbc_flag, int *pbc, ExecutionSpace space)
 {
   KK_FLOAT dx,dy,dz;
@@ -453,7 +453,7 @@ struct AtomVecChargeKokkos_UnpackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  const typename AT::t_float_2d_const _buf;
+  const typename AT::t_double_2d_lr_const _buf;
   typename AT::t_float_1d_3 _x;
   typename AT::t_tagint_1d _tag;
   typename AT::t_int_1d _type;
@@ -463,7 +463,7 @@ struct AtomVecChargeKokkos_UnpackBorder {
 
 
   AtomVecChargeKokkos_UnpackBorder(
-      const typename AT::t_float_2d_const &buf,
+      const typename AT::t_double_2d_lr_const &buf,
       typename AT::t_float_1d_3 &x,
       typename AT::t_tagint_1d &tag,
       typename AT::t_int_1d &type,
@@ -488,7 +488,7 @@ struct AtomVecChargeKokkos_UnpackBorder {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecChargeKokkos::unpack_border_kokkos(const int &n, const int &first,
-                     const DAT::tdual_float_2d &buf,ExecutionSpace space) {
+                     const DAT::tdual_double_2d_lr &buf,ExecutionSpace space) {
   if (first+n >= nmax) {
     grow(first+n+100);
   }
@@ -598,7 +598,7 @@ struct AtomVecChargeKokkos_PackExchangeFunctor {
   typename AT::t_imageint_1d _imagew;
   typename AT::t_float_1d _qw;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d_const _sendlist;
   typename AT::t_int_1d_const _copylist;
   int _nlocal,_dim;
@@ -606,7 +606,7 @@ struct AtomVecChargeKokkos_PackExchangeFunctor {
 
   AtomVecChargeKokkos_PackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d sendlist,
       DAT::tdual_int_1d copylist,int nlocal, int dim,
                 KK_FLOAT lo, KK_FLOAT hi):
@@ -670,7 +670,7 @@ struct AtomVecChargeKokkos_PackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecChargeKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &k_buf,
+int AtomVecChargeKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &k_buf,
                                               DAT::tdual_int_1d k_sendlist,
                                               DAT::tdual_int_1d k_copylist,
                                               ExecutionSpace space,int dim,
@@ -733,14 +733,14 @@ struct AtomVecChargeKokkos_UnpackExchangeFunctor {
   typename AT::t_int_1d _mask;
   typename AT::t_imageint_1d _image;
   typename AT::t_float_1d _q;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d _nlocal;
   int _dim;
   KK_FLOAT _lo,_hi;
 
   AtomVecChargeKokkos_UnpackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d nlocal,
       int dim, KK_FLOAT lo, KK_FLOAT hi):
     _x(DualViewHelper<Space>::view(atom->k_x)),
@@ -780,7 +780,7 @@ struct AtomVecChargeKokkos_UnpackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecChargeKokkos::unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf,int nrecv,
+int AtomVecChargeKokkos::unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf,int nrecv,
                                                 int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,
                                                 ExecutionSpace space) {
   if(space == Host) {
diff --git a/src/KOKKOS/atom_vec_charge_kokkos.h b/src/KOKKOS/atom_vec_charge_kokkos.h
index 2ade90c..72d9fbe 100644
--- a/src/KOKKOS/atom_vec_charge_kokkos.h
+++ b/src/KOKKOS/atom_vec_charge_kokkos.h
@@ -55,17 +55,17 @@ class AtomVecChargeKokkos : public AtomVecKokkos {
 
   void grow_pointers();
   int pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                         DAT::tdual_float_2d buf,int iswap,
+                         DAT::tdual_double_2d_lr buf,int iswap,
                          int pbc_flag, int *pbc, ExecutionSpace space);
   void unpack_border_kokkos(const int &n, const int &nfirst,
-                            const DAT::tdual_float_2d &buf,
+                            const DAT::tdual_double_2d_lr &buf,
                             ExecutionSpace space);
-  int pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &buf,
+  int pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &buf,
                            DAT::tdual_int_1d k_sendlist,
                            DAT::tdual_int_1d k_copylist,
                            ExecutionSpace space, int dim,
                            KK_FLOAT lo, KK_FLOAT hi);
-  int unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf, int nrecv,
+  int unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf, int nrecv,
                              int nlocal, int dim, KK_FLOAT lo, KK_FLOAT hi,
                              ExecutionSpace space);
 
diff --git a/src/KOKKOS/atom_vec_dpd_kokkos.cpp b/src/KOKKOS/atom_vec_dpd_kokkos.cpp
index b53c361..d33eebd 100644
--- a/src/KOKKOS/atom_vec_dpd_kokkos.cpp
+++ b/src/KOKKOS/atom_vec_dpd_kokkos.cpp
@@ -201,7 +201,7 @@ struct AtomVecDPDKokkos_PackComm {
 
   typename AT::t_float_1d_3_randomread _x;
   typename AT::t_float_1d _dpdTheta,_uCond,_uMech,_uChem;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_2d_const _list;
   const int _iswap;
   KK_FLOAT _xprd,_yprd,_zprd,_xy,_xz,_yz;
@@ -213,7 +213,7 @@ struct AtomVecDPDKokkos_PackComm {
       const typename DAT::tdual_float_1d &uCond,
       const typename DAT::tdual_float_1d &uMech,
       const typename DAT::tdual_float_1d &uChem,
-      const typename DAT::tdual_float_2d &buf,
+      const typename DAT::tdual_double_2d_lr &buf,
       const typename DAT::tdual_int_2d &list,
       const int & iswap,
       const KK_FLOAT &xprd, const KK_FLOAT &yprd, const KK_FLOAT &zprd,
@@ -263,7 +263,7 @@ struct AtomVecDPDKokkos_PackComm {
 int AtomVecDPDKokkos::pack_comm_kokkos(const int &n,
                                           const DAT::tdual_int_2d &list,
                                           const int & iswap,
-                                          const DAT::tdual_float_2d &buf,
+                                          const DAT::tdual_double_2d_lr &buf,
                                           const int &pbc_flag,
                                           const int* const pbc)
 {
@@ -500,7 +500,7 @@ struct AtomVecDPDKokkos_UnpackComm {
 
   typename AT::t_float_1d_3 _x;
   typename AT::t_float_1d _dpdTheta,_uCond,_uMech,_uChem;
-  typename AT::t_float_2d_const _buf;
+  typename AT::t_double_2d_lr_const _buf;
   int _first;
 
   AtomVecDPDKokkos_UnpackComm(
@@ -509,7 +509,7 @@ struct AtomVecDPDKokkos_UnpackComm {
       const typename DAT::tdual_float_1d &uCond,
       const typename DAT::tdual_float_1d &uMech,
       const typename DAT::tdual_float_1d &uChem,
-      const typename DAT::tdual_float_2d &buf,
+      const typename DAT::tdual_double_2d_lr &buf,
       const int& first):_x(DualViewHelper<Space>::view(x)),
                         _dpdTheta(DualViewHelper<Space>::view(dpdTheta)),
                         _uCond(DualViewHelper<Space>::view(uCond)),
@@ -533,7 +533,7 @@ struct AtomVecDPDKokkos_UnpackComm {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecDPDKokkos::unpack_comm_kokkos(const int &n, const int &first,
-    const DAT::tdual_float_2d &buf ) {
+    const DAT::tdual_double_2d_lr &buf ) {
   if(commKK->forward_comm_on_host) {
     atomKK->sync(Host,X_MASK|DPDTHETA_MASK|UCOND_MASK|UMECH_MASK|UCHEM_MASK);
     atomKK->modified(Host,X_MASK|DPDTHETA_MASK|UCOND_MASK|UMECH_MASK|UCHEM_MASK);
@@ -762,7 +762,7 @@ struct AtomVecDPDKokkos_PackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d _buf;
+  typename AT::t_double_2d_lr _buf;
   const typename AT::t_int_2d_const _list;
   const int _iswap;
   const typename AT::t_float_1d_3_randomread _x;
@@ -773,7 +773,7 @@ struct AtomVecDPDKokkos_PackBorder {
   KK_FLOAT _dx,_dy,_dz;
 
   AtomVecDPDKokkos_PackBorder(
-      const typename AT::t_float_2d &buf,
+      const typename AT::t_double_2d_lr &buf,
       const typename AT::t_int_2d_const &list,
       const int & iswap,
       const typename AT::t_float_1d_3 &x,
@@ -823,7 +823,7 @@ struct AtomVecDPDKokkos_PackBorder {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecDPDKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist, DAT::tdual_float_2d buf,int iswap,
+int AtomVecDPDKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist, DAT::tdual_double_2d_lr buf,int iswap,
                                int pbc_flag, int *pbc, ExecutionSpace space)
 {
   KK_FLOAT dx,dy,dz;
@@ -1085,7 +1085,7 @@ struct AtomVecDPDKokkos_UnpackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  const typename AT::t_float_2d_const _buf;
+  const typename AT::t_double_2d_lr_const _buf;
   typename AT::t_float_1d_3 _x;
   typename AT::t_tagint_1d _tag;
   typename AT::t_int_1d _type;
@@ -1095,7 +1095,7 @@ struct AtomVecDPDKokkos_UnpackBorder {
 
 
   AtomVecDPDKokkos_UnpackBorder(
-      const typename AT::t_float_2d_const &buf,
+      const typename AT::t_double_2d_lr_const &buf,
       typename AT::t_float_1d_3 &x,
       typename AT::t_tagint_1d &tag,
       typename AT::t_int_1d &type,
@@ -1137,7 +1137,7 @@ struct AtomVecDPDKokkos_UnpackBorder {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecDPDKokkos::unpack_border_kokkos(const int &n, const int &first,
-                     const DAT::tdual_float_2d &buf,ExecutionSpace space) {
+                     const DAT::tdual_double_2d_lr &buf,ExecutionSpace space) {
   atomKK->modified(space,X_MASK|TAG_MASK|TYPE_MASK|MASK_MASK|
                  DPDTHETA_MASK|UCOND_MASK|UMECH_MASK|UCHEM_MASK|
                  UCG_MASK|UCGNEW_MASK);
@@ -1300,7 +1300,7 @@ struct AtomVecDPDKokkos_PackExchangeFunctor {
   typename AT::t_imageint_1d _imagew;
   typename AT::t_float_1d _dpdThetaw,_uCondw,_uMechw,_uChemw,_uCGw,_uCGneww;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d_const _sendlist;
   typename AT::t_int_1d_const _copylist;
   int _nlocal,_dim;
@@ -1308,7 +1308,7 @@ struct AtomVecDPDKokkos_PackExchangeFunctor {
 
   AtomVecDPDKokkos_PackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d sendlist,
       DAT::tdual_int_1d copylist,int nlocal, int dim,
                 KK_FLOAT lo, KK_FLOAT hi):
@@ -1391,7 +1391,7 @@ struct AtomVecDPDKokkos_PackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecDPDKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &k_buf, DAT::tdual_int_1d k_sendlist,DAT::tdual_int_1d k_copylist,ExecutionSpace space,int dim,KK_FLOAT lo,KK_FLOAT hi )
+int AtomVecDPDKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &k_buf, DAT::tdual_int_1d k_sendlist,DAT::tdual_int_1d k_copylist,ExecutionSpace space,int dim,KK_FLOAT lo,KK_FLOAT hi )
 {
   if(nsend > (int) (k_buf.h_view.extent(0)*k_buf.h_view.extent(1))/17) {
     int newsize = nsend*17/k_buf.h_view.extent(1)+1;
@@ -1467,14 +1467,14 @@ struct AtomVecDPDKokkos_UnpackExchangeFunctor {
   typename AT::t_float_1d _uCG;
   typename AT::t_float_1d _uCGnew;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d _nlocal;
   int _dim;
   KK_FLOAT _lo,_hi;
 
   AtomVecDPDKokkos_UnpackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d nlocal,
       int dim, KK_FLOAT lo, KK_FLOAT hi):
                 _x(DualViewHelper<Space>::view(atom->k_x)),
@@ -1518,7 +1518,7 @@ struct AtomVecDPDKokkos_UnpackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecDPDKokkos::unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf,int nrecv,int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,ExecutionSpace space) {
+int AtomVecDPDKokkos::unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf,int nrecv,int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,ExecutionSpace space) {
   if(space == Host) {
     k_count.h_view(0) = nlocal;
     AtomVecDPDKokkos_UnpackExchangeFunctor<Host> f(atomKK,k_buf,k_count,dim,lo,hi);
@@ -1944,7 +1944,7 @@ void AtomVecDPDKokkos::sync_overlapping_device(ExecutionSpace space, unsigned in
     if ((mask & DUCHEM_MASK) && atomKK->k_duChem.need_sync_device())
       perform_async_copy<DAT::tdual_float_1d>(atomKK->k_duChem,space);
     if ((mask & DVECTOR_MASK) && atomKK->k_dvector.need_sync_device())
-      perform_async_copy<DAT::tdual_float_2d>(atomKK->k_dvector,space);
+      perform_async_copy<DAT::tdual_double_2d_lr>(atomKK->k_dvector,space);
   } else {
     if ((mask & X_MASK) && atomKK->k_x.need_sync_host())
       perform_async_copy<DAT::tdual_float_1d_3>(atomKK->k_x,space);
@@ -1977,7 +1977,7 @@ void AtomVecDPDKokkos::sync_overlapping_device(ExecutionSpace space, unsigned in
     if ((mask & DUCHEM_MASK) && atomKK->k_duChem.need_sync_host())
       perform_async_copy<DAT::tdual_float_1d>(atomKK->k_duChem,space);
     if ((mask & DVECTOR_MASK) && atomKK->k_dvector.need_sync_host())
-      perform_async_copy<DAT::tdual_float_2d>(atomKK->k_dvector,space);
+      perform_async_copy<DAT::tdual_double_2d_lr>(atomKK->k_dvector,space);
   }
 }
 
diff --git a/src/KOKKOS/atom_vec_dpd_kokkos.h b/src/KOKKOS/atom_vec_dpd_kokkos.h
index 49f8e9d..583d727 100644
--- a/src/KOKKOS/atom_vec_dpd_kokkos.h
+++ b/src/KOKKOS/atom_vec_dpd_kokkos.h
@@ -64,25 +64,25 @@ class AtomVecDPDKokkos : public AtomVecKokkos {
   void grow_pointers();
   int pack_comm_kokkos(const int &n, const DAT::tdual_int_2d &k_sendlist,
                        const int & iswap,
-                       const DAT::tdual_float_2d &buf,
+                       const DAT::tdual_double_2d_lr &buf,
                        const int &pbc_flag, const int pbc[]);
   void unpack_comm_kokkos(const int &n, const int &nfirst,
-                          const DAT::tdual_float_2d &buf);
+                          const DAT::tdual_double_2d_lr &buf);
   int pack_comm_self(const int &n, const DAT::tdual_int_2d &list,
                      const int & iswap, const int nfirst,
                      const int &pbc_flag, const int pbc[]);
   int pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                         DAT::tdual_float_2d buf,int iswap,
+                         DAT::tdual_double_2d_lr buf,int iswap,
                          int pbc_flag, int *pbc, ExecutionSpace space);
   void unpack_border_kokkos(const int &n, const int &nfirst,
-                            const DAT::tdual_float_2d &buf,
+                            const DAT::tdual_double_2d_lr &buf,
                             ExecutionSpace space);
-  int pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &buf,
+  int pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &buf,
                            DAT::tdual_int_1d k_sendlist,
                            DAT::tdual_int_1d k_copylist,
                            ExecutionSpace space, int dim,
                            KK_FLOAT lo, KK_FLOAT hi);
-  int unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf, int nrecv,
+  int unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf, int nrecv,
                              int nlocal, int dim, KK_FLOAT lo, KK_FLOAT hi,
                              ExecutionSpace space);
 
diff --git a/src/KOKKOS/atom_vec_full_kokkos.cpp b/src/KOKKOS/atom_vec_full_kokkos.cpp
index b7d1eb3..a57d121 100644
--- a/src/KOKKOS/atom_vec_full_kokkos.cpp
+++ b/src/KOKKOS/atom_vec_full_kokkos.cpp
@@ -314,7 +314,7 @@ struct AtomVecFullKokkos_PackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d _buf;
+  typename AT::t_double_2d_lr _buf;
   const typename AT::t_int_2d_const _list;
   const int _iswap;
   const typename AT::t_float_1d_3_randomread _x;
@@ -326,7 +326,7 @@ struct AtomVecFullKokkos_PackBorder {
   KK_FLOAT _dx,_dy,_dz;
 
   AtomVecFullKokkos_PackBorder(
-      const typename AT::t_float_2d &buf,
+      const typename AT::t_double_2d_lr &buf,
       const typename AT::t_int_2d_const &list,
       const int & iswap,
       const typename AT::t_float_1d_3 &x,
@@ -368,7 +368,7 @@ struct AtomVecFullKokkos_PackBorder {
 /* ---------------------------------------------------------------------- */
 
 int AtomVecFullKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                                               DAT::tdual_float_2d buf,int iswap,
+                                               DAT::tdual_double_2d_lr buf,int iswap,
                                                int pbc_flag, int *pbc, ExecutionSpace space)
 {
   KK_FLOAT dx,dy,dz;
@@ -569,7 +569,7 @@ struct AtomVecFullKokkos_UnpackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  const typename AT::t_float_2d_const _buf;
+  const typename AT::t_double_2d_lr_const _buf;
   typename AT::t_float_1d_3 _x;
   typename AT::t_tagint_1d _tag;
   typename AT::t_int_1d _type;
@@ -580,7 +580,7 @@ struct AtomVecFullKokkos_UnpackBorder {
 
 
   AtomVecFullKokkos_UnpackBorder(
-      const typename AT::t_float_2d_const &buf,
+      const typename AT::t_double_2d_lr_const &buf,
       typename AT::t_float_1d_3 &x,
       typename AT::t_tagint_1d &tag,
       typename AT::t_int_1d &type,
@@ -609,7 +609,7 @@ struct AtomVecFullKokkos_UnpackBorder {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecFullKokkos::unpack_border_kokkos(const int &n, const int &first,
-                                                  const DAT::tdual_float_2d &buf,
+                                                  const DAT::tdual_double_2d_lr &buf,
                                                   ExecutionSpace space) {
   atomKK->modified(space,X_MASK|TAG_MASK|TYPE_MASK|MASK_MASK|Q_MASK|MOLECULE_MASK);
   while (first+n >= nmax) grow(0);
@@ -753,7 +753,7 @@ struct AtomVecFullKokkos_PackExchangeFunctor {
   typename AT::t_int_2d _improper_typew;
   typename AT::t_tagint_2d _improper_atom1w,_improper_atom2w,
     _improper_atom3w,_improper_atom4w;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d_const _sendlist;
   typename AT::t_int_1d_const _copylist;
   int _nlocal,_dim;
@@ -762,7 +762,7 @@ struct AtomVecFullKokkos_PackExchangeFunctor {
 
   AtomVecFullKokkos_PackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d sendlist,
       DAT::tdual_int_1d copylist,int nlocal, int dim,
                 KK_FLOAT lo, KK_FLOAT hi):
@@ -952,7 +952,7 @@ struct AtomVecFullKokkos_PackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecFullKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &k_buf,
+int AtomVecFullKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &k_buf,
                                                  DAT::tdual_int_1d k_sendlist,
                                                  DAT::tdual_int_1d k_copylist,
                                                  ExecutionSpace space,int dim,KK_FLOAT lo,
@@ -1071,7 +1071,7 @@ struct AtomVecFullKokkos_UnpackExchangeFunctor {
   typename AT::t_tagint_2d _improper_atom1,_improper_atom2,
     _improper_atom3,_improper_atom4;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d _nlocal;
   int _dim;
   KK_FLOAT _lo,_hi;
@@ -1079,7 +1079,7 @@ struct AtomVecFullKokkos_UnpackExchangeFunctor {
 
   AtomVecFullKokkos_UnpackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d nlocal,
       int dim, KK_FLOAT lo, KK_FLOAT hi):
     _x(DualViewHelper<Space>::view(atom->k_x)),
@@ -1180,7 +1180,7 @@ struct AtomVecFullKokkos_UnpackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecFullKokkos::unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf,int nrecv,
+int AtomVecFullKokkos::unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf,int nrecv,
                                               int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,
                                               ExecutionSpace space) {
   const size_t elements = 20+atom->maxspecial+2*atom->bond_per_atom+4*atom->angle_per_atom+
diff --git a/src/KOKKOS/atom_vec_full_kokkos.h b/src/KOKKOS/atom_vec_full_kokkos.h
index 956e15f..aa5836a 100644
--- a/src/KOKKOS/atom_vec_full_kokkos.h
+++ b/src/KOKKOS/atom_vec_full_kokkos.h
@@ -54,17 +54,17 @@ class AtomVecFullKokkos : public AtomVecKokkos {
 
   void grow_pointers();
   int pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                         DAT::tdual_float_2d buf,int iswap,
+                         DAT::tdual_double_2d_lr buf,int iswap,
                          int pbc_flag, int *pbc, ExecutionSpace space);
   void unpack_border_kokkos(const int &n, const int &nfirst,
-                            const DAT::tdual_float_2d &buf,
+                            const DAT::tdual_double_2d_lr &buf,
                             ExecutionSpace space);
-  int pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &buf,
+  int pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &buf,
                            DAT::tdual_int_1d k_sendlist,
                            DAT::tdual_int_1d k_copylist,
                            ExecutionSpace space, int dim,
                            KK_FLOAT lo, KK_FLOAT hi);
-  int unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf, int nrecv,
+  int unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf, int nrecv,
                              int nlocal, int dim, KK_FLOAT lo, KK_FLOAT hi,
                              ExecutionSpace space);
 
diff --git a/src/KOKKOS/atom_vec_hybrid_kokkos.cpp b/src/KOKKOS/atom_vec_hybrid_kokkos.cpp
index 26a72c5..a52b84e 100644
--- a/src/KOKKOS/atom_vec_hybrid_kokkos.cpp
+++ b/src/KOKKOS/atom_vec_hybrid_kokkos.cpp
@@ -254,14 +254,14 @@ void AtomVecHybridKokkos::force_clear(int n, size_t nbytes)
 
 int AtomVecHybridKokkos::pack_comm_kokkos(const int &n, const DAT::tdual_int_2d &k_sendlist,
                      const int & iswap,
-                     const DAT::tdual_float_2d &buf,
+                     const DAT::tdual_double_2d_lr &buf,
                      const int &pbc_flag, const int pbc[])
 {
   error->all(FLERR,"AtomVecHybridKokkos doesn't yet support threaded comm");
   return 0;
 }
 void AtomVecHybridKokkos::unpack_comm_kokkos(const int &n, const int &nfirst,
-                        const DAT::tdual_float_2d &buf)
+                        const DAT::tdual_double_2d_lr &buf)
 {
   error->all(FLERR,"AtomVecHybridKokkos doesn't yet support threaded comm");
 }
@@ -273,19 +273,19 @@ int AtomVecHybridKokkos::pack_comm_self(const int &n, const DAT::tdual_int_2d &l
   return 0;
 }
 int AtomVecHybridKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                       DAT::tdual_float_2d buf,int iswap,
+                       DAT::tdual_double_2d_lr buf,int iswap,
                        int pbc_flag, int *pbc, ExecutionSpace space)
 {
   error->all(FLERR,"AtomVecHybridKokkos doesn't yet support threaded comm");
   return 0;
 }
 void AtomVecHybridKokkos::unpack_border_kokkos(const int &n, const int &nfirst,
-                          const DAT::tdual_float_2d &buf,
+                          const DAT::tdual_double_2d_lr &buf,
                           ExecutionSpace space)
 {
   error->all(FLERR,"AtomVecHybridKokkos doesn't yet support threaded comm");
 }
-int AtomVecHybridKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &buf,
+int AtomVecHybridKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &buf,
                          DAT::tdual_int_1d k_sendlist,
                          DAT::tdual_int_1d k_copylist,
                          ExecutionSpace space, int dim,
@@ -294,7 +294,7 @@ int AtomVecHybridKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_float_
   error->all(FLERR,"AtomVecHybridKokkos doesn't yet support threaded comm");
   return 0;
 }
-int AtomVecHybridKokkos::unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf, int nrecv,
+int AtomVecHybridKokkos::unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf, int nrecv,
                            int nlocal, int dim, KK_FLOAT lo, KK_FLOAT hi,
                            ExecutionSpace space)
 {
diff --git a/src/KOKKOS/atom_vec_hybrid_kokkos.h b/src/KOKKOS/atom_vec_hybrid_kokkos.h
index 124f73f..775b966 100644
--- a/src/KOKKOS/atom_vec_hybrid_kokkos.h
+++ b/src/KOKKOS/atom_vec_hybrid_kokkos.h
@@ -69,25 +69,25 @@ class AtomVecHybridKokkos : public AtomVecKokkos {
 
   int pack_comm_kokkos(const int &n, const DAT::tdual_int_2d &k_sendlist,
                        const int & iswap,
-                       const DAT::tdual_float_2d &buf,
+                       const DAT::tdual_double_2d_lr &buf,
                        const int &pbc_flag, const int pbc[]);
   void unpack_comm_kokkos(const int &n, const int &nfirst,
-                          const DAT::tdual_float_2d &buf);
+                          const DAT::tdual_double_2d_lr &buf);
   int pack_comm_self(const int &n, const DAT::tdual_int_2d &list,
                      const int & iswap, const int nfirst,
                      const int &pbc_flag, const int pbc[]);
   int pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                         DAT::tdual_float_2d buf,int iswap,
+                         DAT::tdual_double_2d_lr buf,int iswap,
                          int pbc_flag, int *pbc, ExecutionSpace space);
   void unpack_border_kokkos(const int &n, const int &nfirst,
-                            const DAT::tdual_float_2d &buf,
+                            const DAT::tdual_double_2d_lr &buf,
                             ExecutionSpace space);
-  int pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &buf,
+  int pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &buf,
                            DAT::tdual_int_1d k_sendlist,
                            DAT::tdual_int_1d k_copylist,
                            ExecutionSpace space, int dim,
                            KK_FLOAT lo, KK_FLOAT hi);
-  int unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf, int nrecv,
+  int unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf, int nrecv,
                              int nlocal, int dim, KK_FLOAT lo, KK_FLOAT hi,
                              ExecutionSpace space);
 
diff --git a/src/KOKKOS/atom_vec_molecular_kokkos.cpp b/src/KOKKOS/atom_vec_molecular_kokkos.cpp
index da645b4..bb5f2e9 100644
--- a/src/KOKKOS/atom_vec_molecular_kokkos.cpp
+++ b/src/KOKKOS/atom_vec_molecular_kokkos.cpp
@@ -306,7 +306,7 @@ struct AtomVecMolecularKokkos_PackComm {
   typedef ArrayTypes<Space> AT;
 
   typename AT::t_float_1d_3_randomread _x;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_2d_const _list;
   const int _iswap;
   KK_FLOAT _xprd,_yprd,_zprd,_xy,_xz,_yz;
@@ -314,7 +314,7 @@ struct AtomVecMolecularKokkos_PackComm {
 
   AtomVecMolecularKokkos_PackComm(
       const typename DAT::tdual_float_1d_3 &x,
-      const typename DAT::tdual_float_2d &buf,
+      const typename DAT::tdual_double_2d_lr &buf,
       const typename DAT::tdual_int_2d &list,
       const int & iswap,
       const KK_FLOAT &xprd, const KK_FLOAT &yprd, const KK_FLOAT &zprd,
@@ -356,7 +356,7 @@ struct AtomVecMolecularKokkos_PackComm {
 int AtomVecMolecularKokkos::pack_comm_kokkos(const int &n,
                                              const DAT::tdual_int_2d &list,
                                              const int & iswap,
-                                             const DAT::tdual_float_2d &buf,
+                                             const DAT::tdual_double_2d_lr &buf,
                                              const int &pbc_flag,
                                              const int* const pbc)
 {
@@ -550,12 +550,12 @@ struct AtomVecMolecularKokkos_UnpackComm {
   typedef ArrayTypes<Space> AT;
 
   typename AT::t_float_1d_3 _x;
-  typename AT::t_float_2d_const _buf;
+  typename AT::t_double_2d_lr_const _buf;
   int _first;
 
   AtomVecMolecularKokkos_UnpackComm(
       const typename DAT::tdual_float_1d_3 &x,
-      const typename DAT::tdual_float_2d &buf,
+      const typename DAT::tdual_double_2d_lr &buf,
       const int& first):_x(DualViewHelper<Space>::view(x)),_buf(DualViewHelper<Space>::view(buf)),
                         _first(first) {};
 
@@ -570,7 +570,7 @@ struct AtomVecMolecularKokkos_UnpackComm {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecMolecularKokkos::unpack_comm_kokkos(const int &n, const int &first,
-    const DAT::tdual_float_2d &buf ) {
+    const DAT::tdual_double_2d_lr &buf ) {
   if(commKK->forward_comm_on_host) {
     atomKK->sync(Host,X_MASK);
     atomKK->modified(Host,X_MASK);
@@ -757,7 +757,7 @@ struct AtomVecMolecularKokkos_PackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d _buf;
+  typename AT::t_double_2d_lr _buf;
   const typename AT::t_int_2d_const _list;
   const int _iswap;
   const typename AT::t_float_1d_3_randomread _x;
@@ -768,7 +768,7 @@ struct AtomVecMolecularKokkos_PackBorder {
   KK_FLOAT _dx,_dy,_dz;
 
   AtomVecMolecularKokkos_PackBorder(
-      const typename AT::t_float_2d &buf,
+      const typename AT::t_double_2d_lr &buf,
       const typename AT::t_int_2d_const &list,
       const int & iswap,
       const typename AT::t_float_1d_3 &x,
@@ -807,7 +807,7 @@ struct AtomVecMolecularKokkos_PackBorder {
 /* ---------------------------------------------------------------------- */
 
 int AtomVecMolecularKokkos::pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                                               DAT::tdual_float_2d buf,int iswap,
+                                               DAT::tdual_double_2d_lr buf,int iswap,
                                                int pbc_flag, int *pbc, ExecutionSpace space)
 {
   KK_FLOAT dx,dy,dz;
@@ -1002,7 +1002,7 @@ struct AtomVecMolecularKokkos_UnpackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  const typename AT::t_float_2d_const _buf;
+  const typename AT::t_double_2d_lr_const _buf;
   typename AT::t_float_1d_3 _x;
   typename AT::t_tagint_1d _tag;
   typename AT::t_int_1d _type;
@@ -1012,7 +1012,7 @@ struct AtomVecMolecularKokkos_UnpackBorder {
 
 
   AtomVecMolecularKokkos_UnpackBorder(
-      const typename AT::t_float_2d_const &buf,
+      const typename AT::t_double_2d_lr_const &buf,
       typename AT::t_float_1d_3 &x,
       typename AT::t_tagint_1d &tag,
       typename AT::t_int_1d &type,
@@ -1039,7 +1039,7 @@ struct AtomVecMolecularKokkos_UnpackBorder {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecMolecularKokkos::unpack_border_kokkos(const int &n, const int &first,
-                                                  const DAT::tdual_float_2d &buf,
+                                                  const DAT::tdual_double_2d_lr &buf,
                                                   ExecutionSpace space) {
   atomKK->modified(space,X_MASK|TAG_MASK|TYPE_MASK|MASK_MASK|MOLECULE_MASK);
   while (first+n >= nmax) grow(0);
@@ -1177,7 +1177,7 @@ struct AtomVecMolecularKokkos_PackExchangeFunctor {
   typename AT::t_int_2d _improper_typew;
   typename AT::t_tagint_2d _improper_atom1w,_improper_atom2w,
     _improper_atom3w,_improper_atom4w;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d_const _sendlist;
   typename AT::t_int_1d_const _copylist;
   int _nlocal,_dim;
@@ -1186,7 +1186,7 @@ struct AtomVecMolecularKokkos_PackExchangeFunctor {
 
   AtomVecMolecularKokkos_PackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d sendlist,
       DAT::tdual_int_1d copylist,int nlocal, int dim,
                 KK_FLOAT lo, KK_FLOAT hi):
@@ -1371,7 +1371,7 @@ struct AtomVecMolecularKokkos_PackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecMolecularKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &k_buf,
+int AtomVecMolecularKokkos::pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &k_buf,
                                                  DAT::tdual_int_1d k_sendlist,
                                                  DAT::tdual_int_1d k_copylist,
                                                  ExecutionSpace space,int dim,KK_FLOAT lo,
@@ -1489,7 +1489,7 @@ struct AtomVecMolecularKokkos_UnpackExchangeFunctor {
   typename AT::t_tagint_2d _improper_atom1,_improper_atom2,
     _improper_atom3,_improper_atom4;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d _nlocal;
   int _dim;
   KK_FLOAT _lo,_hi;
@@ -1497,7 +1497,7 @@ struct AtomVecMolecularKokkos_UnpackExchangeFunctor {
 
   AtomVecMolecularKokkos_UnpackExchangeFunctor(
       const AtomKokkos* atom,
-      const DAT::tdual_float_2d buf,
+      const DAT::tdual_double_2d_lr buf,
       DAT::tdual_int_1d nlocal,
       int dim, KK_FLOAT lo, KK_FLOAT hi):
     _x(DualViewHelper<Space>::view(atom->k_x)),
@@ -1597,7 +1597,7 @@ struct AtomVecMolecularKokkos_UnpackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecMolecularKokkos::unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf,int nrecv,
+int AtomVecMolecularKokkos::unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf,int nrecv,
                                                    int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,
                                                    ExecutionSpace space) {
   const size_t elements = 19+atom->maxspecial+2*atom->bond_per_atom+4*atom->angle_per_atom+
diff --git a/src/KOKKOS/atom_vec_molecular_kokkos.h b/src/KOKKOS/atom_vec_molecular_kokkos.h
index d60670c..9974595 100644
--- a/src/KOKKOS/atom_vec_molecular_kokkos.h
+++ b/src/KOKKOS/atom_vec_molecular_kokkos.h
@@ -61,25 +61,25 @@ class AtomVecMolecularKokkos : public AtomVecKokkos {
   void grow_pointers();
   int pack_comm_kokkos(const int &n, const DAT::tdual_int_2d &k_sendlist,
                        const int & iswap,
-                       const DAT::tdual_float_2d &buf,
+                       const DAT::tdual_double_2d_lr &buf,
                        const int &pbc_flag, const int pbc[]);
   void unpack_comm_kokkos(const int &n, const int &nfirst,
-                          const DAT::tdual_float_2d &buf);
+                          const DAT::tdual_double_2d_lr &buf);
   int pack_comm_self(const int &n, const DAT::tdual_int_2d &list,
                      const int & iswap, const int nfirst,
                      const int &pbc_flag, const int pbc[]);
   int pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                         DAT::tdual_float_2d buf,int iswap,
+                         DAT::tdual_double_2d_lr buf,int iswap,
                          int pbc_flag, int *pbc, ExecutionSpace space);
   void unpack_border_kokkos(const int &n, const int &nfirst,
-                            const DAT::tdual_float_2d &buf,
+                            const DAT::tdual_double_2d_lr &buf,
                             ExecutionSpace space);
-  int pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &buf,
+  int pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &buf,
                            DAT::tdual_int_1d k_sendlist,
                            DAT::tdual_int_1d k_copylist,
                            ExecutionSpace space, int dim,
                            KK_FLOAT lo, KK_FLOAT hi);
-  int unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf, int nrecv,
+  int unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf, int nrecv,
                              int nlocal, int dim, KK_FLOAT lo, KK_FLOAT hi,
                              ExecutionSpace space);
 
diff --git a/src/KOKKOS/atom_vec_sphere_kokkos.cpp b/src/KOKKOS/atom_vec_sphere_kokkos.cpp
index 363a58c..6190fe2 100644
--- a/src/KOKKOS/atom_vec_sphere_kokkos.cpp
+++ b/src/KOKKOS/atom_vec_sphere_kokkos.cpp
@@ -212,7 +212,7 @@ struct AtomVecSphereKokkos_PackComm {
 
   typename AT::t_float_1d_3_randomread _x;
   typename AT::t_float_1d _radius,_rmass;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_2d_const _list;
   const int _iswap;
   KK_FLOAT _xprd,_yprd,_zprd,_xy,_xz,_yz;
@@ -222,7 +222,7 @@ struct AtomVecSphereKokkos_PackComm {
     const typename DAT::tdual_float_1d_3 &x,
     const typename DAT::tdual_float_1d &radius,
     const typename DAT::tdual_float_1d &rmass,
-    const typename DAT::tdual_float_2d &buf,
+    const typename DAT::tdual_double_2d_lr &buf,
     const typename DAT::tdual_int_2d &list,
     const int & iswap,
     const KK_FLOAT &xprd, const KK_FLOAT &yprd, const KK_FLOAT &zprd,
@@ -235,7 +235,7 @@ struct AtomVecSphereKokkos_PackComm {
     _xy(xy),_xz(xz),_yz(yz) {
     const size_t elements = 5;
     const size_t maxsend = (DualViewHelper<Space>::view(buf).extent(0)*DualViewHelper<Space>::view(buf).extent(1))/elements;
-    _buf = typename AT::t_float_2d_um(DualViewHelper<Space>::view(buf).data(),maxsend,elements);
+    _buf = typename AT::t_double_2d_lr_um(DualViewHelper<Space>::view(buf).data(),maxsend,elements);
     _pbc[0] = pbc[0]; _pbc[1] = pbc[1]; _pbc[2] = pbc[2];
     _pbc[3] = pbc[3]; _pbc[4] = pbc[4]; _pbc[5] = pbc[5];
   }
@@ -269,7 +269,7 @@ int AtomVecSphereKokkos::pack_comm_kokkos(
   const int &n,
   const DAT::tdual_int_2d &list,
   const int & iswap,
-  const DAT::tdual_float_2d &buf,
+  const DAT::tdual_double_2d_lr &buf,
   const int &pbc_flag,
   const int* const pbc)
 {
@@ -372,7 +372,7 @@ struct AtomVecSphereKokkos_PackCommVel {
   typename AT::t_int_1d _mask;
   typename AT::t_float_1d _radius,_rmass;
   typename AT::t_float_1d_3 _v, _omega;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_2d_const _list;
   const int _iswap;
   double _xprd,_yprd,_zprd,_xy,_xz,_yz;
@@ -387,7 +387,7 @@ struct AtomVecSphereKokkos_PackCommVel {
     const typename DAT::tdual_float_1d &rmass,
     const typename DAT::tdual_float_1d_3 &v,
     const typename DAT::tdual_float_1d_3 &omega,
-    const typename DAT::tdual_float_2d &buf,
+    const typename DAT::tdual_double_2d_lr &buf,
     const typename DAT::tdual_int_2d &list,
     const int &iswap,
     const double &xprd, const double &yprd, const double &zprd,
@@ -407,7 +407,7 @@ struct AtomVecSphereKokkos_PackCommVel {
   {
     const size_t elements = 9 + 2 * RADVARY;
     const int maxsend = (DualViewHelper<Space>::view(buf).extent(0)*DualViewHelper<Space>::view(buf).extent(1))/elements;
-    _buf = typename AT::t_float_2d_um(DualViewHelper<Space>::view(buf).data(),maxsend,elements);
+    _buf = typename AT::t_double_2d_lr_um(DualViewHelper<Space>::view(buf).data(),maxsend,elements);
     _pbc[0] = pbc[0]; _pbc[1] = pbc[1]; _pbc[2] = pbc[2];
     _pbc[3] = pbc[3]; _pbc[4] = pbc[4]; _pbc[5] = pbc[5];
     _h_rate[0] = h_rate[0]; _h_rate[1] = h_rate[1]; _h_rate[2] = h_rate[2];
@@ -463,7 +463,7 @@ int AtomVecSphereKokkos::pack_comm_vel_kokkos(
   const int &n,
   const DAT::tdual_int_2d &list,
   const int & iswap,
-  const DAT::tdual_float_2d &buf,
+  const DAT::tdual_double_2d_lr &buf,
   const int &pbc_flag,
   const int* const pbc)
 {
@@ -894,14 +894,14 @@ struct AtomVecSphereKokkos_UnpackComm {
 
   typename AT::t_float_1d_3 _x;
   typename AT::t_float_1d _radius,_rmass;
-  typename AT::t_float_2d_const_um _buf;
+  typename AT::t_double_2d_lr_const_um _buf;
   int _first;
 
   AtomVecSphereKokkos_UnpackComm(
     const typename DAT::tdual_float_1d_3 &x,
     const typename DAT::tdual_float_1d &radius,
     const typename DAT::tdual_float_1d &rmass,
-    const typename DAT::tdual_float_2d &buf,
+    const typename DAT::tdual_double_2d_lr &buf,
     const int& first):
     _x(DualViewHelper<Space>::view(x)),
     _radius(DualViewHelper<Space>::view(radius)),
@@ -910,7 +910,7 @@ struct AtomVecSphereKokkos_UnpackComm {
   {
     const size_t elements = 5;
     const size_t maxsend = (DualViewHelper<Space>::view(buf).extent(0)*DualViewHelper<Space>::view(buf).extent(1))/elements;
-    _buf = typename AT::t_float_2d_const_um(DualViewHelper<Space>::view(buf).data(),maxsend,elements);
+    _buf = typename AT::t_double_2d_lr_const_um(DualViewHelper<Space>::view(buf).data(),maxsend,elements);
   };
 
   KOKKOS_INLINE_FUNCTION
@@ -927,7 +927,7 @@ struct AtomVecSphereKokkos_UnpackComm {
 
 void AtomVecSphereKokkos::unpack_comm_kokkos(
   const int &n, const int &first,
-  const DAT::tdual_float_2d &buf ) {
+  const DAT::tdual_double_2d_lr &buf ) {
   // Fallback to AtomVecKokkos if radvary == 0
   if (radvary == 0) {
     AtomVecKokkos::unpack_comm_kokkos(n,first,buf);
@@ -961,7 +961,7 @@ struct AtomVecSphereKokkos_UnpackCommVel {
   typename AT::t_float_1d_3 _x;
   typename AT::t_float_1d _radius,_rmass;
   typename AT::t_float_1d_3 _v, _omega;
-  typename AT::t_float_2d_const _buf;
+  typename AT::t_double_2d_lr_const _buf;
   int _first;
 
   AtomVecSphereKokkos_UnpackCommVel(
@@ -970,7 +970,7 @@ struct AtomVecSphereKokkos_UnpackCommVel {
     const typename DAT::tdual_float_1d &rmass,
     const typename DAT::tdual_float_1d_3 &v,
     const typename DAT::tdual_float_1d_3 &omega,
-    const typename DAT::tdual_float_2d &buf,
+    const typename DAT::tdual_double_2d_lr &buf,
     const int& first):
     _x(DualViewHelper<Space>::view(x)),
     _radius(DualViewHelper<Space>::view(radius)),
@@ -1006,7 +1006,7 @@ struct AtomVecSphereKokkos_UnpackCommVel {
 
 void AtomVecSphereKokkos::unpack_comm_vel_kokkos(
   const int &n, const int &first,
-  const DAT::tdual_float_2d &buf ) {
+  const DAT::tdual_double_2d_lr &buf ) {
   if(commKK->forward_comm_on_host) {
     atomKK->modified(Host,X_MASK|RADIUS_MASK|RMASS_MASK|V_MASK|OMEGA_MASK);
     if (radvary == 0) {
@@ -1443,7 +1443,7 @@ struct AtomVecSphereKokkos_PackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   const typename AT::t_int_2d_const _list;
   const int _iswap;
   const typename AT::t_float_1d_3_randomread _x;
@@ -1454,7 +1454,7 @@ struct AtomVecSphereKokkos_PackBorder {
   KK_FLOAT _dx,_dy,_dz;
 
   AtomVecSphereKokkos_PackBorder(
-    const typename AT::t_float_2d &buf,
+    const typename AT::t_double_2d_lr &buf,
     const typename AT::t_int_2d_const &list,
     const int &iswap,
     const typename AT::t_float_1d_3 &x,
@@ -1472,7 +1472,7 @@ struct AtomVecSphereKokkos_PackBorder {
   {
     const size_t elements = 8;
     const int maxsend = (buf.extent(0)*buf.extent(1))/elements;
-    _buf = typename AT::t_float_2d_um(buf.data(),maxsend,elements);
+    _buf = typename AT::t_double_2d_lr_um(buf.data(),maxsend,elements);
   }
 
   KOKKOS_INLINE_FUNCTION
@@ -1498,7 +1498,7 @@ struct AtomVecSphereKokkos_PackBorder {
 /* ---------------------------------------------------------------------- */
 
 int AtomVecSphereKokkos::pack_border_kokkos(
-  int n, DAT::tdual_int_2d k_sendlist, DAT::tdual_float_2d buf,int iswap,
+  int n, DAT::tdual_int_2d k_sendlist, DAT::tdual_double_2d_lr buf,int iswap,
   int pbc_flag, int *pbc, ExecutionSpace space)
 {
   KK_FLOAT dx,dy,dz;
@@ -1614,7 +1614,7 @@ struct AtomVecSphereKokkos_PackBorderVel {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   const typename AT::t_int_2d_const _list;
   const int _iswap;
   const typename AT::t_float_1d_3_randomread _x;
@@ -1627,7 +1627,7 @@ struct AtomVecSphereKokkos_PackBorderVel {
   const int _deform_groupbit;
 
   AtomVecSphereKokkos_PackBorderVel(
-    const typename AT::t_float_2d &buf,
+    const typename AT::t_double_2d_lr &buf,
     const typename AT::t_int_2d_const &list,
     const int &iswap,
     const typename AT::t_float_1d_3 &x,
@@ -1652,7 +1652,7 @@ struct AtomVecSphereKokkos_PackBorderVel {
   {
     const size_t elements = 14;
     const int maxsend = (buf.extent(0)*buf.extent(1))/elements;
-    _buf = typename AT::t_float_2d_um(buf.data(),maxsend,elements);
+    _buf = typename AT::t_double_2d_lr_um(buf.data(),maxsend,elements);
   }
 
   KOKKOS_INLINE_FUNCTION
@@ -1693,7 +1693,7 @@ struct AtomVecSphereKokkos_PackBorderVel {
 /* ---------------------------------------------------------------------- */
 
 int AtomVecSphereKokkos::pack_border_vel_kokkos(
-  int n, DAT::tdual_int_2d k_sendlist, DAT::tdual_float_2d buf,int iswap,
+  int n, DAT::tdual_int_2d k_sendlist, DAT::tdual_double_2d_lr buf,int iswap,
   int pbc_flag, int *pbc, ExecutionSpace space)
 {
   KK_FLOAT dx=0,dy=0,dz=0;
@@ -1899,7 +1899,7 @@ struct AtomVecSphereKokkos_UnpackBorder {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d_const_um _buf;
+  typename AT::t_double_2d_lr_const_um _buf;
   typename AT::t_float_1d_3 _x;
   typename AT::t_tagint_1d _tag;
   typename AT::t_int_1d _type;
@@ -1908,7 +1908,7 @@ struct AtomVecSphereKokkos_UnpackBorder {
   int _first;
 
   AtomVecSphereKokkos_UnpackBorder(
-    const typename AT::t_float_2d &buf,
+    const typename AT::t_double_2d_lr &buf,
     const typename AT::t_float_1d_3 &x,
     const typename AT::t_tagint_1d &tag,
     const typename AT::t_int_1d &type,
@@ -1923,7 +1923,7 @@ struct AtomVecSphereKokkos_UnpackBorder {
   {
     const size_t elements = 8;
     const int maxsend = (buf.extent(0)*buf.extent(1))/elements;
-    _buf = typename AT::t_float_2d_const_um(buf.data(),maxsend,elements);
+    _buf = typename AT::t_double_2d_lr_const_um(buf.data(),maxsend,elements);
   };
 
   KOKKOS_INLINE_FUNCTION
@@ -1942,7 +1942,7 @@ struct AtomVecSphereKokkos_UnpackBorder {
 /* ---------------------------------------------------------------------- */
 
 void AtomVecSphereKokkos::unpack_border_kokkos(const int &n, const int &first,
-                                               const DAT::tdual_float_2d &buf,ExecutionSpace space) {
+                                               const DAT::tdual_double_2d_lr &buf,ExecutionSpace space) {
   while (first+n >= nmax) grow(0);
   if(space==Host) {
     struct AtomVecSphereKokkos_UnpackBorder<Host> f(buf.h_view,
@@ -1997,7 +1997,7 @@ struct AtomVecSphereKokkos_UnpackBorderVel {
   typedef DeviceType device_type;
   typedef ArrayTypes<Space> AT;
 
-  typename AT::t_float_2d_const_um _buf;
+  typename AT::t_double_2d_lr_const_um _buf;
   typename AT::t_float_1d_3 _x;
   typename AT::t_tagint_1d _tag;
   typename AT::t_int_1d _type;
@@ -2008,7 +2008,7 @@ struct AtomVecSphereKokkos_UnpackBorderVel {
   int _first;
 
   AtomVecSphereKokkos_UnpackBorderVel(
-    const typename AT::t_float_2d_const &buf,
+    const typename AT::t_double_2d_lr_const &buf,
     const typename AT::t_float_1d_3 &x,
     const typename AT::t_tagint_1d &tag,
     const typename AT::t_int_1d &type,
@@ -2026,7 +2026,7 @@ struct AtomVecSphereKokkos_UnpackBorderVel {
   {
     const size_t elements = 14;
     const int maxsend = (buf.extent(0)*buf.extent(1))/elements;
-    _buf = typename AT::t_float_2d_const_um(buf.data(),maxsend,elements);
+    _buf = typename AT::t_double_2d_lr_const_um(buf.data(),maxsend,elements);
   };
 
   KOKKOS_INLINE_FUNCTION
@@ -2052,7 +2052,7 @@ struct AtomVecSphereKokkos_UnpackBorderVel {
 
 void AtomVecSphereKokkos::unpack_border_vel_kokkos(
   const int &n, const int &first,
-  const DAT::tdual_float_2d &buf,ExecutionSpace space) {
+  const DAT::tdual_double_2d_lr &buf,ExecutionSpace space) {
   while (first+n >= nmax) grow(0);
   if(space==Host) {
     struct AtomVecSphereKokkos_UnpackBorderVel<Host> f(buf.h_view,
@@ -2144,7 +2144,7 @@ struct AtomVecSphereKokkos_PackExchangeFunctor {
   typename AT::t_imageint_1d _imagew;
   typename AT::t_float_1d _radiusw,_rmassw;
   typename AT::t_float_1d_3 _omegaw;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d_const _sendlist;
   typename AT::t_int_1d_const _copylist;
   int _nlocal,_dim;
@@ -2152,7 +2152,7 @@ struct AtomVecSphereKokkos_PackExchangeFunctor {
 
   AtomVecSphereKokkos_PackExchangeFunctor(
     const AtomKokkos* atom,
-    const DAT::tdual_float_2d buf,
+    const DAT::tdual_double_2d_lr buf,
     DAT::tdual_int_1d sendlist,
     DAT::tdual_int_1d copylist,int nlocal, int dim,KK_FLOAT lo, KK_FLOAT hi):
     _x(DualViewHelper<Space>::view(atom->k_x)),
@@ -2181,7 +2181,7 @@ struct AtomVecSphereKokkos_PackExchangeFunctor {
     const size_t elements = 16;
     const int maxsend = (DualViewHelper<Space>::view(buf).extent(0)*DualViewHelper<Space>::view(buf).extent(1))/elements;
 
-    _buf = typename AT::t_float_2d_um(DualViewHelper<Space>::view(buf).data(),maxsend,elements);
+    _buf = typename AT::t_double_2d_lr_um(DualViewHelper<Space>::view(buf).data(),maxsend,elements);
   }
 
   KOKKOS_INLINE_FUNCTION
@@ -2229,7 +2229,7 @@ struct AtomVecSphereKokkos_PackExchangeFunctor {
 
 int AtomVecSphereKokkos::pack_exchange_kokkos(
   const int &nsend,
-  DAT::tdual_float_2d &k_buf,
+  DAT::tdual_double_2d_lr &k_buf,
   DAT::tdual_int_1d k_sendlist,
   DAT::tdual_int_1d k_copylist,
   ExecutionSpace space,int dim,KK_FLOAT lo,KK_FLOAT hi)
@@ -2307,14 +2307,14 @@ struct AtomVecSphereKokkos_UnpackExchangeFunctor {
   typename AT::t_float_1d _radius;
   typename AT::t_float_1d _rmass;
   typename AT::t_float_1d_3 _omega;
-  typename AT::t_float_2d_um _buf;
+  typename AT::t_double_2d_lr_um _buf;
   typename AT::t_int_1d _nlocal;
   int _dim;
   KK_FLOAT _lo,_hi;
 
   AtomVecSphereKokkos_UnpackExchangeFunctor(
     const AtomKokkos* atom,
-    const DAT::tdual_float_2d buf,
+    const DAT::tdual_double_2d_lr buf,
     DAT::tdual_int_1d nlocal,
     int dim, KK_FLOAT lo, KK_FLOAT hi):
     _x(DualViewHelper<Space>::view(atom->k_x)),
@@ -2361,7 +2361,7 @@ struct AtomVecSphereKokkos_UnpackExchangeFunctor {
 
 /* ---------------------------------------------------------------------- */
 
-int AtomVecSphereKokkos::unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf,int nrecv,int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,ExecutionSpace space) {
+int AtomVecSphereKokkos::unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf,int nrecv,int nlocal,int dim,KK_FLOAT lo,KK_FLOAT hi,ExecutionSpace space) {
   if(space == Host) {
     k_count.h_view(0) = nlocal;
     AtomVecSphereKokkos_UnpackExchangeFunctor<Host> f(atomKK,k_buf,k_count,dim,lo,hi);
diff --git a/src/KOKKOS/atom_vec_sphere_kokkos.h b/src/KOKKOS/atom_vec_sphere_kokkos.h
index c05d3dd..3377d8d 100644
--- a/src/KOKKOS/atom_vec_sphere_kokkos.h
+++ b/src/KOKKOS/atom_vec_sphere_kokkos.h
@@ -73,37 +73,37 @@ class AtomVecSphereKokkos : public AtomVecKokkos {
 
   int pack_comm_kokkos(const int &n, const DAT::tdual_int_2d &k_sendlist,
                        const int & iswap,
-                       const DAT::tdual_float_2d &buf,
+                       const DAT::tdual_double_2d_lr &buf,
                        const int &pbc_flag, const int pbc[]);
   void unpack_comm_kokkos(const int &n, const int &nfirst,
-                          const DAT::tdual_float_2d &buf);
+                          const DAT::tdual_double_2d_lr &buf);
   int pack_comm_vel_kokkos(const int &n, const DAT::tdual_int_2d &k_sendlist,
                            const int & iswap,
-                           const DAT::tdual_float_2d &buf,
+                           const DAT::tdual_double_2d_lr &buf,
                            const int &pbc_flag, const int pbc[]);
   void unpack_comm_vel_kokkos(const int &n, const int &nfirst,
-                              const DAT::tdual_float_2d &buf);
+                              const DAT::tdual_double_2d_lr &buf);
   int pack_comm_self(const int &n, const DAT::tdual_int_2d &list,
                      const int & iswap, const int nfirst,
                      const int &pbc_flag, const int pbc[]);
   int pack_border_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                         DAT::tdual_float_2d buf,int iswap,
+                         DAT::tdual_double_2d_lr buf,int iswap,
                          int pbc_flag, int *pbc, ExecutionSpace space);
   void unpack_border_kokkos(const int &n, const int &nfirst,
-                            const DAT::tdual_float_2d &buf,
+                            const DAT::tdual_double_2d_lr &buf,
                             ExecutionSpace space);
   int pack_border_vel_kokkos(int n, DAT::tdual_int_2d k_sendlist,
-                             DAT::tdual_float_2d buf,int iswap,
+                             DAT::tdual_double_2d_lr buf,int iswap,
                              int pbc_flag, int *pbc, ExecutionSpace space);
   void unpack_border_vel_kokkos(const int &n, const int &nfirst,
-                                const DAT::tdual_float_2d &buf,
+                                const DAT::tdual_double_2d_lr &buf,
                                 ExecutionSpace space);
-  int pack_exchange_kokkos(const int &nsend,DAT::tdual_float_2d &buf,
+  int pack_exchange_kokkos(const int &nsend,DAT::tdual_double_2d_lr &buf,
                            DAT::tdual_int_1d k_sendlist,
                            DAT::tdual_int_1d k_copylist,
                            ExecutionSpace space, int dim,
                            KK_FLOAT lo, KK_FLOAT hi);
-  int unpack_exchange_kokkos(DAT::tdual_float_2d &k_buf, int nrecv,
+  int unpack_exchange_kokkos(DAT::tdual_double_2d_lr &k_buf, int nrecv,
                              int nlocal, int dim, KK_FLOAT lo, KK_FLOAT hi,
                              ExecutionSpace space);
 
