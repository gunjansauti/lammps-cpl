"Higher level section"_Build.html - "LAMMPS WWW Site"_lws - "LAMMPS
Documentation"_ld - "LAMMPS Commands"_lc :c

:link(lws,http://lammps.sandia.gov)
:link(ld,Manual.html)
:link(lc,Section_commands.html#comm)

:line

Using optional packages in a LAMMPS build :h3

Note that by default only a few of LAMMPS optional packages are
installed.  To build LAMMPS with optional packages, see "this
section"_#start_3 below, before proceeding to Step 9.

2.3 Making LAMMPS with optional packages :h4,link(start_3)

This section has the following sub-sections:

2.3.1 "Package basics"_#start_3_1
2.3.2 "Including/excluding packages"_#start_3_2
2.3.3 "Packages that require extra libraries"_#start_3_3 :all(b)

:line

Package basics: :h5,link(start_3_1)

The source code for LAMMPS is structured as a set of core files which
are always included, plus optional packages.  Packages are groups of
files that enable a specific set of features.  For example, force
fields for molecular systems or granular systems are in packages.

"Section 4"_Section_packages.html in the manual has details about all
the packages, which come in two flavors: [standard] and [user]
packages. It also has specific instructions for building LAMMPS with
any package which requires an extra library.  General instructions are
below.

You can see the list of all packages by typing "make package" from
within the src directory of the LAMMPS distribution.  It will also
list various make commands that can be used to manage packages.

If you use a command in a LAMMPS input script that is part of a
package, you must have built LAMMPS with that package, else you will
get an error that the style is invalid or the command is unknown.
Every command's doc page specifies if it is part of a package.  You can
type

lmp_machine -h :pre

to run your executable with the optional "-h command-line
switch"_#start_6 for "help", which will list the styles and commands
known to your executable, and immediately exit.

:line

Including/excluding packages :h5,link(start_3_2)

To use (or not use) a package you must install it (or un-install it)
before building LAMMPS.  From the src directory, this is as simple as:

make yes-colloid
make mpi :pre

or

make no-user-omp
make mpi :pre

NOTE: You should NOT install/un-install packages and build LAMMPS in a
single make command using multiple targets, e.g. make yes-colloid mpi.
This is because the make procedure creates a list of source files that
will be out-of-date for the build if the package configuration changes
within the same command.

Any package can be installed or not in a LAMMPS build, independent of
all other packages.  However, some packages include files derived from
files in other packages.  LAMMPS checks for this and does the right
thing.  I.e. individual files are only included if their dependencies
are already included.  Likewise, if a package is excluded, other files
dependent on that package are also excluded.

NOTE: The one exception is that we do not recommend building with both
the KOKKOS package installed and any of the other acceleration
packages (GPU, OPT, USER-INTEL, USER-OMP) also installed.  This is
because of how Kokkos sometimes builds using a wrapper compiler which
can make it difficult to invoke all the compile/link flags correctly
for both Kokkos and non-Kokkos files.

If you will never run simulations that use the features in a
particular packages, there is no reason to include it in your build.
For some packages, this will keep you from having to build extra
libraries, and will also produce a smaller executable which may run a
bit faster.

When you download a LAMMPS tarball, three packages are pre-installed
in the src directory -- KSPACE, MANYBODY, MOLECULE -- because they are
so commonly used.  When you download LAMMPS source files from the SVN
or Git repositories, no packages are pre-installed.

Packages are installed or un-installed by typing

make yes-name
make no-name :pre

where "name" is the name of the package in lower-case, e.g.  name =
kspace for the KSPACE package or name = user-atc for the USER-ATC
package.  You can also type any of these commands:

make yes-all | install all packages
make no-all | un-install all packages
make yes-standard or make yes-std | install standard packages
make no-standard or make no-std| un-install standard packages
make yes-user | install user packages
make no-user | un-install user packages
make yes-lib | install packages that require extra libraries
make no-lib | un-install packages that require extra libraries
make yes-ext | install packages that require external libraries
make no-ext | un-install packages that require external libraries :tb(s=|)

which install/un-install various sets of packages.  Typing "make
package" will list all the these commands.

NOTE: Installing or un-installing a package works by simply moving
files back and forth between the main src directory and
sub-directories with the package name (e.g. src/KSPACE, src/USER-ATC),
so that the files are included or excluded when LAMMPS is built.
After you have installed or un-installed a package, you must re-build
LAMMPS for the action to take effect.

The following make commands help manage files that exist in both the
src directory and in package sub-directories.  You do not normally
need to use these commands unless you are editing LAMMPS files or have
downloaded a patch from the LAMMPS web site.

Typing "make package-status" or "make ps" will show which packages are
currently installed. For those that are installed, it will list any
files that are different in the src directory and package
sub-directory.

Typing "make package-installed" or "make pi" will list which packages are
currently installed, without listing the status of packages that are not
installed.

Typing "make package-update" or "make pu" will overwrite src files
with files from the package sub-directories if the package is
installed.  It should be used after a patch has been applied, since
patches only update the files in the package sub-directory, but not
the src files.

Typing "make package-overwrite" will overwrite files in the package
sub-directories with src files.

Typing "make package-diff" lists all differences between these files.

Again, just type "make package" to see all of the package-related make
options.
